.container {
    background-color: skyblue;
}

.plane {
    width: 200px;

    /* transform */

    /* translate */

    /* rotate */

    /* scale */

    /* skew */

    /* matrix */

    /* matrix(scaleX(), skewY(), skewX(), scaleY(), translateX(), translateY()) */

    /* transition: property timing timing_function delay; */

    transition: transform 3s cubic-bezier(1,-0.08,.05,1) 3s;
}


.plane:hover {
    transform: translateX(800px) translateY(300px) scale(1.5);
}

/* @keyframes - set of rules

animation-name
animation-duration
animation-delay
animation-iteration-count
1 to infinite
animation-direction
animation-timing-function
animation-fill-mode
animation */

/* animation-direction:

normal - The animation is played as normal (forwards). This is default
reverse - The animation is played in reverse direction (backwards)
alternate - The animation is played forwards first, then backwards
alternate-reverse - The animation is played backwards first, then forwards */


/* animation-timing-function:


ease - Specifies an animation with a slow start, then fast, then end slowly (this is default)
linear - Specifies an animation with the same speed from start to end
ease-in - Specifies an animation with a slow start
ease-out - Specifies an animation with a slow end
ease-in-out - Specifies an animation with a slow start and end
cubic-bezier(n,n,n,n) - Lets you define your own values in a cubic-bezier function */

/* animation-fill-mode:

none - Default value. Animation will not apply any styles to the element before or after it is executing
forwards - The element will retain the style values that is set by the last keyframe (depends on animation-direction and animation-iteration-count)
backwards - The element will get the style values that is set by the first keyframe (depends on animation-direction), and retain this during the animation-delay period
both - The animation will follow the rules for both forwards and backwards, extending the animation properties in both directions */


.box {
    width: 200px;
    height: 200px;
    background-color: cornflowerblue;
    /* animation-name: boxcolor-animation;
    animation-duration: 3s; */
    /* animation-iteration-count: infinite; */
    /* animation-delay: 1s; */
    /* animation-timing-function: cubic-bezier(1,-0.77,.57,.11); */
    /* animation-fill-mode: both; */

    /* animation:  animation-name animation-duration animation-timing-function animation-delay animation-iteration-count animation-direction animation-fill-mode */
    animation: boxcolor-animation 3s linear 1s infinite normal forwards;
    position: relative;
    left: 20px;
    top:20px;
}

/* Rules */
/* from - 0%    to - 100% */
@keyframes box-animation {
    from {background-color: crimson; }
    to {background-color: cornflowerblue;}
}

@keyframes boxcolor-animation {
    0% {background-color: gold; left: 20px; top: 20px;}
    25% {background-color: crimson;left: 220px;top:20px}
    50% {background-color: yellowgreen; left: 220px;top:220px}
    75% {background-color: green;left: 20px;top:220px}
    100% {background-color: purple; left: 20px;top:20px}
}



/* Truck Animation */

.truck {
    position: absolute;
    top: 400px;
    animation-name: truck-animation;
    animation-duration: 5s;
    animation-iteration-count: infinite;
    animation-timing-function: linear;
}

body {
    overflow: hidden;
}

@keyframes truck-animation {
    from {transform: translateX(-300px);}
    to {transform: translateX(1600px);}
}

.cloud {
    position: absolute;
    top:30px;
    right: 10px;
    animation: smallcloud-animation 70s linear 1s infinite;
    opacity: 0.7;
    z-index: 1;
}

.large-cloud {
    position: absolute;
    top:200px;
    right: 10px;
    width: 400px;
    animation: smallcloud-animation 30s linear 1s infinite;
    z-index: 1;
}

@keyframes smallcloud-animation {
    from {right: -200px;}
    to {right: 100%;}
}


.sun {
    background-color: yellow;
    width: 100px;
    left: 100px;
    height: 100px;
    border-radius: 50%;
    position: absolute;
    top: 150px;
}